#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è AlphaFutures Scanner
"""

import asyncio
import time
import os
from dotenv import load_dotenv
from alpha_futures_scanner1 import AlphaFuturesScanner, BotConfig

load_dotenv()

async def quick_test_optimization():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    try:
        config = BotConfig(
            TELEGRAM_BOT_TOKEN=os.getenv('TELEGRAM_BOT_TOKEN'),
            TELEGRAM_CHAT_ID=os.getenv('TELEGRAM_CHAT_ID'),
            MAX_SYMBOLS=20,
            SCAN_INTERVAL=60
        )
        
        bot = AlphaFuturesScanner(config)
        
        start_time = time.time()
        signals = await bot.optimized_scan_market(max_symbols=15)
        duration = time.time() - start_time
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫")
        print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        
        return signals
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return []

if __name__ == "__main__":
    asyncio.run(quick_test_optimization())