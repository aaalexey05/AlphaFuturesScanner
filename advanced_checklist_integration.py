#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
"""

import logging
from typing import Dict, Any, Tuple
from advanced_checklist import AdvancedChecklist, calculate_advanced_score

logger = logging.getLogger(__name__)

async def integrate_advanced_checklist(main_bot, symbol: str, data: Dict, indicators: Dict) -> Tuple[bool, float, Dict]:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞
    advanced_checker = AdvancedChecklist(main_bot.bybit_client)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    advanced_results = {}
    
    try:
        # üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        advanced_results['multi_timeframe_alignment'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_multi_timeframe_alignment(symbol)
        advanced_results['multi_timeframe_alignment'] = {'passed': passed, 'details': details}
        
        # RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
        advanced_results['rsi_divergence'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_rsi_divergence(data['klines'])
        advanced_results['rsi_divergence'] = {'passed': passed, 'details': details}
        
        # –ö–ª–∞—Å—Ç–µ—Ä—ã –æ–±—ä–µ–º–∞
        current_price = indicators.get('current_price', 0)
        advanced_results['volume_clusters'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_volume_clusters(data['orderbook'], current_price)
        advanced_results['volume_clusters'] = {'passed': passed, 'details': details}
        
        # üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        advanced_results['multi_timeframe_rsi'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_multi_timeframe_rsi(symbol)
        advanced_results['multi_timeframe_rsi'] = {'passed': passed, 'details': details}
        
        advanced_results['stochastic_momentum'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_stochastic_momentum(data['klines'])
        advanced_results['stochastic_momentum'] = {'passed': passed, 'details': details}
        
        # üèõÔ∏è –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        advanced_results['market_cap_volume'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_market_cap_volume(symbol)
        advanced_results['market_cap_volume'] = {'passed': passed, 'details': details}
        
        advanced_results['relative_volatility'] = {'passed': False, 'details': {}}
        current_atr = indicators.get('atr', 0)
        passed, details = await advanced_checker.check_relative_volatility(symbol, current_atr, current_price)
        advanced_results['relative_volatility'] = {'passed': passed, 'details': details}
        
        # ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        advanced_results['trading_session'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_trading_session()
        advanced_results['trading_session'] = {'passed': passed, 'details': details}
        
        advanced_results['seasonal_pattern'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_seasonal_pattern()
        advanced_results['seasonal_pattern'] = {'passed': passed, 'details': details}
        
        # üéØ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
        advanced_results['psychological_levels'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_psychological_levels(current_price)
        advanced_results['psychological_levels'] = {'passed': passed, 'details': details}
        
        advanced_results['large_orders_clusters'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_large_orders_clusters(data['orderbook'], current_price)
        advanced_results['large_orders_clusters'] = {'passed': passed, 'details': details}
        
        # üîÑ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        advanced_results['correlation_with_btc'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_correlation_with_btc(symbol, data['klines'])
        advanced_results['correlation_with_btc'] = {'passed': passed, 'details': details}
        
        # üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        advanced_results['var_risk'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_var_risk(data['klines'])
        advanced_results['var_risk'] = {'passed': passed, 'details': details}
        
        advanced_results['max_drawdown'] = {'passed': False, 'details': {}}
        passed, details = await advanced_checker.check_max_drawdown(data['klines'])
        advanced_results['max_drawdown'] = {'passed': passed, 'details': details}
        
        # üìä –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ score
        advanced_score, detailed_scores = calculate_advanced_score(advanced_results)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª - 60%
        passed = advanced_score >= 0.60
        
        logger.info(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç –¥–ª—è {symbol}: score = {advanced_score:.2f}, –ø—Ä–æ–π–¥–µ–Ω–æ = {passed}")
        
        return passed, advanced_score, {
            'advanced_results': advanced_results,
            'detailed_scores': detailed_scores,
            'total_score': advanced_score
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞: {e}")
        return False, 0, {'error': str(e)}

# üéØ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞

def add_advanced_checklist_to_bot(main_bot_class):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    async def run_comprehensive_checklist(self, symbol: str, data: Dict, indicators: Dict) -> Tuple[bool, float, Dict]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç (–±–∞–∑–æ–≤—ã–π + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)"""
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π —á–µ–∫–ª–∏—Å—Ç
        basic_passed, basic_score, basic_results = await self.run_enhanced_checklist(symbol, data, indicators)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç
        advanced_passed, advanced_score, advanced_results = await integrate_advanced_checklist(
            self, symbol, data, indicators
        )
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score (70% –±–∞–∑–æ–≤—ã–π + 30% —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        combined_score = (basic_score * 0.7) + (advanced_score * 0.3)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        combined_passed = combined_score >= 0.65
        
        logger.info(f"–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç –¥–ª—è {symbol}: "
                   f"–±–∞–∑–æ–≤—ã–π = {basic_score:.2f}, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π = {advanced_score:.2f}, "
                   f"–∏—Ç–æ–≥–æ–≤—ã–π = {combined_score:.2f}, –ø—Ä–æ–π–¥–µ–Ω–æ = {combined_passed}")
        
        return combined_passed, combined_score, {
            'basic_checklist': {
                'passed': basic_passed,
                'score': basic_score,
                'results': basic_results
            },
            'advanced_checklist': {
                'passed': advanced_passed,
                'score': advanced_score,
                'results': advanced_results
            },
            'combined_score': combined_score
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å –±–æ—Ç–∞
    main_bot_class.run_comprehensive_checklist = run_comprehensive_checklist
    
    return main_bot_class