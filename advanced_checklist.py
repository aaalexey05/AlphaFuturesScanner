#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫–ª–∏—Å—Ç–∞ –¥–ª—è AlphaFutures Scanner
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import numpy as np
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any, Tuple
import logging
import asyncio
from pybit.unified_trading import HTTP  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ—Ç - –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∏–∂–µ

logger = logging.getLogger(__name__)

class AdvancedChecklist:
    """–ö–ª–∞—Å—Å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–ª—è —á–µ–∫–ª–∏—Å—Ç–∞"""
    
    def __init__(self, bybit_client: HTTP):
        self.bybit_client = bybit_client
    
    # üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
    
    async def check_multi_timeframe_alignment(self, symbol: str) -> Tuple[bool, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        try:
            timeframes = [
                ('5', '5min'),
                ('15', '15min'), 
                ('60', '1h'),
                ('240', '4h')
            ]
            
            results = {}
            bullish_count = 0
            total_timeframes = len(timeframes)
            
            tasks = []
            for tf_code, tf_name in timeframes:
                task = asyncio.create_task(self._check_single_timeframe(symbol, tf_code, tf_name))
                tasks.append((task, tf_name))
            
            for task, tf_name in tasks:
                is_bullish = await task
                results[tf_name] = is_bullish
                if is_bullish:
                    bullish_count += 1
            
            # –ö–∞–∫ –º–∏–Ω–∏–º—É–º 75% —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—á—å–∏–º–∏
            passed = (bullish_count / total_timeframes) >= 0.75
            
            return passed, {
                'bullish_count': bullish_count,
                'total_timeframes': total_timeframes,
                'timeframe_results': results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¢–§: {e}")
            return False, {'error': str(e)}
    
    async def _check_single_timeframe(self, symbol: str, tf_code: str, tf_name: str) -> bool:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        try:
            kline_response = self.bybit_client.get_kline(
                category="linear",
                symbol=symbol,
                interval=tf_code,
                limit=50
            )
            klines = kline_response['result']['list']
            if not klines:
                return False
            return self._is_timeframe_bullish(klines)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¢–§ {tf_name} –¥–ª—è {symbol}: {e}")
            return False
    
    def _is_timeframe_bullish(self, klines: List) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ã—á—å–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ"""
        try:
            if len(klines) < 20:
                return False
            
            closes = [float(k[4]) for k in klines]
            highs = [float(k[2]) for k in klines]
            lows = [float(k[3]) for k in klines]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Ö–æ–¥—è—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (higher highs, higher lows)
            recent_highs = highs[-10:]
            recent_lows = lows[-10:]
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            current_price = closes[-1]
            sma_20 = np.mean(closes[-20:])
            sma_50 = np.mean(closes[-50:]) if len(closes) >= 50 else sma_20
            
            # –û–±—ä–µ–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            volumes = [float(k[5]) for k in klines[-10:]]
            avg_volume = np.mean(volumes)
            current_volume = volumes[-1] if volumes else 0
            
            return (current_price > sma_20 > sma_50 and 
                    current_volume > avg_volume * 1.1)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¢–§: {e}")
            return False
    
    async def check_rsi_divergence(self, klines: List) -> Tuple[bool, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã—á—å–∏—Ö –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π RSI"""
        try:
            if len(klines) < 30:
                return False, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}
            closes = [float(k[4]) for k in klines]
            lows = [float(k[3]) for k in klines]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Å–≤–µ—á–µ–π
            rsi_values = []
            for i in range(14, len(closes)):
                period_closes = closes[i-14:i+1]
                rsi = self._calculate_rsi(period_closes)
                rsi_values.append(rsi)
            
            if len(rsi_values) < 16:
                return False, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö RSI'}
            
            # –ò—â–µ–º –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 15 –ø–µ—Ä–∏–æ–¥–∞—Ö
            price_lows = lows[-16:]  # –ù–∏–∑—ã —Ü–µ–Ω
            rsi_lows = rsi_values[-16:]  # –ù–∏–∑—ã RSI
            
            # –ò—â–µ–º –±—ã—á—å—é –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é
            bullish_divergence = self._find_bullish_divergence(price_lows, rsi_lows)
            
            return bullish_divergence, {
                'current_rsi': rsi_values[-1],
                'divergence_found': bullish_divergence,
                'price_lows': price_lows[-5:],
                'rsi_lows': rsi_lows[-5:]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ RSI: {e}")
            return False, {'error': str(e)}
    
    def _calculate_rsi(self, prices: List[float], period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç RSI"""
        if len(prices) < period + 1:
            return 50
        
        deltas = np.diff(prices)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        avg_gain = np.mean(gains[-period:])
        avg_loss = np.mean(losses[-period:])
        
        if avg_loss == 0:
            return 100
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        
        return min(100, max(0, rsi))
    
    def _find_bullish_divergence(self, price_lows: List[float], rsi_lows: List[float]) -> bool:
        """–ü–æ–∏—Å–∫ –±—ã—á—å–µ–π –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏"""
        if len(price_lows) < 6 or len(rsi_lows) < 6:
            return False
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω–∏–º—É–º–∞
        recent_price_lows = price_lows[-6:]
        recent_rsi_lows = rsi_lows[-6:]
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
        price_minima = self._find_local_minima(recent_price_lows)
        rsi_minima = self._find_local_minima(recent_rsi_lows)
        
        if len(price_minima) < 2 or len(rsi_minima) < 2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é: —Ü–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –º–∏–Ω–∏–º—É–º—ã, RSI - –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ
        latest_price_min = min(price_minima[-2:])
        latest_rsi_min = min(rsi_minima[-2:])
        previous_price_min = max(price_minima[-2:])
        previous_rsi_min = max(rsi_minima[-2:])
        
        return (latest_price_min < previous_price_min and 
                latest_rsi_min > previous_rsi_min)
    
    def _find_local_minima(self, data: List[float], window: int = 3) -> List[float]:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤"""
        minima = []
        for i in range(window, len(data) - window):
            if (data[i] == min(data[i-window:i+window+1]) and 
                data[i] != data[i-1] and data[i] != data[i+1]):
                minima.append(data[i])
        return minima
    
    async def check_volume_clusters(self, orderbook: Dict, current_price: float) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ–±—ä–µ–º–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω—è—Ö"""
        try:
            bids = orderbook.get('b', [])
            asks = orderbook.get('a', [])
            
            if not bids or not asks:
                return False, {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞'}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –≤–±–ª–∏–∑–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            price_range = 0.02  # ¬±2% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            lower_bound = current_price * (1 - price_range)
            upper_bound = current_price * (1 + price_range)
            
            bid_volume_near = 0
            ask_volume_near = 0
            
            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –±–∏–¥–æ–≤ —Ä—è–¥–æ–º —Å —Ü–µ–Ω–æ–π
            for bid in bids:
                price = float(bid[0])
                volume = float(bid[1])
                if lower_bound <= price <= current_price:
                    bid_volume_near += volume * price
            
            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –∞—Å–∫–æ–≤ —Ä—è–¥–æ–º —Å —Ü–µ–Ω–æ–π
            for ask in asks:
                price = float(ask[0])
                volume = float(ask[1])
                if current_price <= price <= upper_bound:
                    ask_volume_near += volume * price
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –æ–±—ä–µ–º–æ–≤
            total_volume_near = bid_volume_near + ask_volume_near
            if total_volume_near == 0:
                return False, {'error': '–ù–µ—Ç –æ–±—ä–µ–º–æ–≤ —Ä—è–¥–æ–º'}
            
            bid_ratio = bid_volume_near / total_volume_near
            ask_ratio = ask_volume_near / total_volume_near
            
            # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–±–∏–¥–æ–≤)
            passed = bid_ratio > ask_ratio
            
            return passed, {
                'bid_volume_usdt': bid_volume_near,
                'ask_volume_usdt': ask_volume_near,
                'bid_ratio': bid_ratio,
                'ask_ratio': ask_ratio,
                'volume_imbalance': bid_ratio - ask_ratio
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ–±—ä–µ–º–∞: {e}")
            return False, {'error': str(e)}
    
    # üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    
    async def check_multi_timeframe_rsi(self, symbol: str) -> Tuple[bool, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ RSI –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        try:
            timeframes = [
                ('15', 45, 70),  # 15min, RSI –º–µ–∂–¥—É 45-70
                ('60', 40, 75),  # 1h, RSI –º–µ–∂–¥—É 40-75  
                ('240', 35, 80)  # 4h, RSI –º–µ–∂–¥—É 35-80
            ]
            
            results = {}
            passed_timeframes = 0
            
            tasks = []
            for tf_code, min_rsi, max_rsi in timeframes:
                task = asyncio.create_task(self._check_single_rsi(symbol, tf_code, min_rsi, max_rsi))
                tasks.append((task, tf_code))
            
            for task, tf_code in tasks:
                passed, rsi, details = await task
                results[tf_code] = details
                if passed:
                    passed_timeframes += 1
            
            # –ö–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–∑ 3 –¢–§ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            passed = passed_timeframes >= 2
            
            return passed, {
                'passed_timeframes': passed_timeframes,
                'total_timeframes': len(timeframes),
                'timeframe_results': results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RSI –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¢–§: {e}")
            return False, {'error': str(e)}
    
    async def _check_single_rsi(self, symbol: str, tf_code: str, min_rsi: float, max_rsi: float) -> Tuple[bool, float, Dict]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RSI –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        try:
            kline_response = self.bybit_client.get_kline(
                category="linear",
                symbol=symbol,
                interval=tf_code,
                limit=100
            )
            klines = kline_response['result']['list']
            if not klines:
                return False, 50, {'passed': False, 'rsi': 50, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            
            closes = [float(k[4]) for k in klines]
            rsi = self._calculate_rsi(closes)
            passed = min_rsi <= rsi <= max_rsi
            return passed, rsi, {
                'passed': passed,
                'rsi': rsi,
                'min_rsi': min_rsi,
                'max_rsi': max_rsi
            }
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ RSI –Ω–∞ –¢–§ {tf_code}: {e}")
            return False, 50, {'passed': False, 'rsi': 50, 'error': str(e)}
    
    async def check_stochastic_momentum(self, klines: List) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞"""
        try:
            if len(klines) < 20:
                return False, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}
            
            highs = [float(k[2]) for k in klines]
            lows = [float(k[3]) for k in klines]
            closes = [float(k[4]) for k in klines]
            
            # –†–∞—Å—á–µ—Ç %K (—Å—Ç–æ—Ö–∞—Å—Ç–∏–∫)
            period = 14
            smoothing = 3
            
            stoch_k = []
            for i in range(period, len(closes)):
                high_max = max(highs[i-period:i])
                low_min = min(lows[i-period:i])
                current_close = closes[i]
                
                if high_max != low_min:
                    k_value = 100 * (current_close - low_min) / (high_max - low_min)
                    stoch_k.append(k_value)
            
            if len(stoch_k) < smoothing:
                return False, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞'}
            
            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ %K –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è %D
            stoch_d = []
            for i in range(smoothing-1, len(stoch_k)):
                d_value = np.mean(stoch_k[i-smoothing+1:i+1])
                stoch_d.append(d_value)
            
            if not stoch_k or not stoch_d:
                return False, {'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞'}
            
            current_k = stoch_k[-1]
            current_d = stoch_d[-1]
            
            # –ë—ã—á—å–∏ —É—Å–ª–æ–≤–∏—è:
            # 1. %K –≤—ã—à–µ %D
            # 2. –û–±–∞ –≤—ã—à–ª–∏ –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (<20)
            # 3. –ù–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∑–æ–Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è (20-80)
            k_above_d = current_k > current_d
            out_of_oversold = current_k > 20 and current_d > 20
            in_accumulation = 20 <= current_k <= 80
            
            passed = k_above_d and out_of_oversold and in_accumulation
            
            return passed, {
                'k_value': current_k,
                'd_value': current_d,
                'k_above_d': k_above_d,
                'out_of_oversold': out_of_oversold,
                'in_accumulation': in_accumulation
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞: {e}")
            return False, {'error': str(e)}
    
    # üèõÔ∏è –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    
    async def check_market_cap_volume(self, symbol: str) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            ticker_response = self.bybit_client.get_tickers(
                category="linear",
                symbol=symbol
            )
            
            if not ticker_response['result']['list']:
                return False, {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞'}
            
            ticker_data = ticker_response['result']['list'][0]
            volume_24h = float(ticker_data.get('volume24h', 0))
            turnover_24h = float(ticker_data.get('turnover24h', 0))
            
            if volume_24h == 0:
                return False, {'error': '–ù—É–ª–µ–≤–æ–π –æ–±—ä–µ–º'}
            
            # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–∞ –∫ –æ–±—ä–µ–º—É (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å–¥–µ–ª–∫–∏)
            avg_trade_size = turnover_24h / volume_24h if volume_24h > 0 else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            sufficient_volume = volume_24h > 100000  # –ú–∏–Ω–∏–º—É–º 100k –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            sufficient_turnover = turnover_24h > 1000000  # –ú–∏–Ω–∏–º—É–º 1M USDT –æ–±–æ—Ä–æ—Ç–∞
            reasonable_avg_trade = 100 <= avg_trade_size <= 10000  # –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
            
            passed = sufficient_volume and sufficient_turnover and reasonable_avg_trade
            
            return passed, {
                'volume_24h': volume_24h,
                'turnover_24h': turnover_24h,
                'avg_trade_size': avg_trade_size,
                'sufficient_volume': sufficient_volume,
                'sufficient_turnover': sufficient_turnover,
                'reasonable_avg_trade': reasonable_avg_trade
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False, {'error': str(e)}
    
    async def check_relative_volatility(self, symbol: str, current_atr: float, current_price: float) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ BTC"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ BTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            btc_data = self.bybit_client.get_kline(category="linear",
                symbol='BTCUSDT',
                interval='15',
                limit=100
            )
            
            if not btc_data['result']['list']:
                return True, {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö BTC', 'assume_ok': True}
            
            btc_klines = btc_data['result']['list']
            btc_closes = [float(k[4]) for k in btc_klines]
            btc_highs = [float(k[2]) for k in btc_klines]
            btc_lows = [float(k[3]) for k in btc_klines]
            
            # –†–∞—Å—á–µ—Ç ATR –¥–ª—è BTC
            btc_atr = self._calculate_atr(btc_highs, btc_lows, btc_closes)
            btc_price = btc_closes[-1] if btc_closes else current_price
            
            if btc_atr == 0 or btc_price == 0:
                return True, {'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ BTC ATR', 'assume_ok': True}
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ ATR
            symbol_atr_percent = (current_atr / current_price) * 100
            btc_atr_percent = (btc_atr / btc_price) * 100
            
            if btc_atr_percent == 0:
                return True, {'error': '–ù—É–ª–µ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å BTC', 'assume_ok': True}
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            relative_volatility = symbol_atr_percent / btc_atr_percent
            
            # –ü—Ä–∏–µ–º–ª–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0.5x - 2.0x –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ BTC
            passed = 0.5 <= relative_volatility <= 2.0
            
            return passed, {
                'symbol_atr_percent': symbol_atr_percent,
                'btc_atr_percent': btc_atr_percent,
                'relative_volatility': relative_volatility,
                'volatility_ratio': relative_volatility
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return True, {'error': str(e), 'assume_ok': True}
    
    def _calculate_atr(self, highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç Average True Range"""
        if len(highs) < period or len(lows) < period or len(closes) < period:
            return 0
        
        true_ranges = []
        for i in range(1, len(highs)):
            high_low = highs[i] - lows[i]
            high_close = abs(highs[i] - closes[i-1])
            low_close = abs(lows[i] - closes[i-1])
            
            true_range = max(high_low, high_close, low_close)
            true_ranges.append(true_range)
        
        if len(true_ranges) < period:
            return 0
        
        atr = np.mean(true_ranges[-period:])
        return atr
    
    # ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    
    async def check_trading_session(self) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            now = datetime.now()
            current_hour = now.hour
            current_weekday = now.weekday()
            current_minute = now.minute
            
            # –ò–∑–±–µ–≥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö
            if current_weekday >= 5:  # –°—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                return False, {
                    'session': 'weekend',
                    'optimal': False,
                    'reason': '–í—ã—Ö–æ–¥–Ω—ã–µ - –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ (UTC)
            sessions = {
                'asian': (0, 8),      # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                'european': (8, 16),  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è  
                'american': (16, 24)  # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
            }
            
            current_session = None
            for session, (start, end) in sessions.items():
                if start <= current_hour < end:
                    current_session = session
                    break
            
            # –ù–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:
            # - –ù–∞—á–∞–ª–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π —Å–µ—Å—Å–∏–∏ (8-10 UTC)
            # - –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∏ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π (14-16 UTC)
            # - –ù–∞—á–∞–ª–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏ (16-18 UTC)
            optimal_periods = [
                (8, 10),   # –ù–∞—á–∞–ª–æ –ï–≤—Ä–æ–ø—ã
                (14, 16),  # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –ï–≤—Ä–æ–ø–∞/–ê–º–µ—Ä–∏–∫–∞
                (16, 18)   # –ù–∞—á–∞–ª–æ –ê–º–µ—Ä–∏–∫–∏
            ]
            
            in_optimal_period = any(start <= current_hour < end for start, end in optimal_periods)
            
            # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∏–Ω—É—Ç —á–∞—Å–∞ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–µ–π)
            avoid_volatile_minutes = current_minute <= 5 or current_minute >= 55
            
            passed = in_optimal_period and not avoid_volatile_minutes
            
            return passed, {
                'current_session': current_session,
                'current_hour': current_hour,
                'current_minute': current_minute,
                'in_optimal_period': in_optimal_period,
                'avoid_volatile_minutes': avoid_volatile_minutes,
                'optimal_periods': optimal_periods
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            return True, {'error': str(e), 'assume_ok': True}
    
    async def check_seasonal_pattern(self) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            now = datetime.now()
            current_month = now.month
            current_day = now.day
            current_weekday = now.weekday()
            
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –±—ã—á—å–∏ –ø–µ—Ä–∏–æ–¥—ã:
            bullish_months = [1, 4, 10, 11]  # –Ø–Ω–≤–∞—Ä—å, –∞–ø—Ä–µ–ª—å, –æ–∫—Ç—è–±—Ä—å, –Ω–æ—è–±—Ä—å
            bearish_months = [2, 6, 9]       # –§–µ–≤—Ä–∞–ª—å, –∏—é–Ω—å, —Å–µ–Ω—Ç—è–±—Ä—å
            
            # –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
            month_end_effect = current_day >= 25 or current_day <= 7
            
            # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞"
            first_week_effect = current_day <= 7
            
            # –ü—è—Ç–Ω–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç (–ø—Ä–æ—Ñ–∏—Ç-—Ç–µ–π–∫–∏–Ω–≥ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–Ω—ã–º–∏)
            friday_effect = current_weekday == 4  # –ü—è—Ç–Ω–∏—Ü–∞
            
            # –ë—ã—á—å–∏ —É—Å–ª–æ–≤–∏—è:
            month_positive = current_month in bullish_months
            month_neutral = current_month not in bearish_months
            timing_positive = month_end_effect or first_week_effect
            avoid_friday = not friday_effect
            
            passed = (month_positive or (month_neutral and timing_positive)) and avoid_friday
            
            return passed, {
                'current_month': current_month,
                'current_day': current_day,
                'month_positive': month_positive,
                'month_neutral': month_neutral,
                'timing_positive': timing_positive,
                'avoid_friday': avoid_friday,
                'bullish_months': bullish_months,
                'bearish_months': bearish_months
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return True, {'error': str(e), 'assume_ok': True}
    
    # üéØ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
    
    async def check_psychological_levels(self, current_price: float) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π"""
        try:
            if current_price <= 0:
                return False, {'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞'}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ü–µ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
            price_order = 10 ** (np.floor(np.log10(current_price)))
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
            if current_price < 1:
                levels = [0.001, 0.005, 0.01, 0.05, 0.1, 0.5]
            elif current_price < 10:
                levels = [1, 2, 5, 10]
            elif current_price < 100:
                levels = [10, 20, 50, 100]
            elif current_price < 1000:
                levels = [100, 200, 500, 1000]
            else:
                levels = [1000, 2000, 5000, 10000, 20000, 50000]
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
            distances = [abs(current_price - level) for level in levels]
            min_distance = min(distances) if distances else current_price
            nearest_level = levels[distances.index(min_distance)] if distances else 0
            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
            distance_percent = (min_distance / current_price) * 100
            
            # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π (>0.5%)
            passed = distance_percent > 0.5
            
            return passed, {
                'current_price': current_price,
                'nearest_level': nearest_level,
                'distance_percent': distance_percent,
                'all_levels': levels,
                'min_distance': min_distance
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            return True, {'error': str(e), 'assume_ok': True}
    
    async def check_large_orders_clusters(self, orderbook: Dict, current_price: float) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ø–ª–µ–Ω–∏–π –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            bids = orderbook.get('b', [])
            asks = orderbook.get('a', [])
            
            if not bids or not asks:
                return False, {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞'}
            
            # –ü–æ—Ä–æ–≥ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–≤ USDT)
            large_order_threshold = 10000
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤ —Å—Ç–∞–∫–∞–Ω–µ
            large_bids = 0
            large_asks = 0
            
            for bid in bids:
                price = float(bid[0])
                volume = float(bid[1])
                order_size = price * volume
                if order_size >= large_order_threshold:
                    large_bids += 1
            
            for ask in asks:
                price = float(ask[0])
                volume = float(ask[1])
                order_size = price * volume
                if order_size >= large_order_threshold:
                    large_asks += 1
            
            # –ë–∞–ª–∞–Ω—Å –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            total_large_orders = large_bids + large_asks
            if total_large_orders == 0:
                return True, {
                    'large_bids': 0,
                    'large_asks': 0,
                    'order_imbalance': 0,
                    'assume_ok': True,
                    'reason': '–ù–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤'
                }
            
            order_imbalance = (large_bids - large_asks) / total_large_orders
            
            # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
            passed = order_imbalance > 0
            
            return passed, {
                'large_bids': large_bids,
                'large_asks': large_asks,
                'total_large_orders': total_large_orders,
                'order_imbalance': order_imbalance,
                'threshold': large_order_threshold
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return True, {'error': str(e), 'assume_ok': True}
    
    # üîÑ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    
    async def check_correlation_with_btc(self, symbol: str, klines: List) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å Bitcoin"""
        try:
            if symbol == 'BTCUSDT':
                return True, {'correlation': 1.0, 'is_btc': True}
            
            if len(klines) < 50:
                return True, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', 'assume_ok': True}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ BTC –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥
            btc_response = self.bybit_client.get_kline(
                category="linear",
                symbol='BTCUSDT',
                interval='15',
                limit=len(klines)
            )
            
            if not btc_response['result']['list']:
                return True, {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö BTC', 'assume_ok': True}
            
            btc_klines = btc_response['result']['list']
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–µ
            min_length = min(len(klines), len(btc_klines))
            symbol_closes = [float(k[4]) for k in klines[-min_length:]]
            btc_closes = [float(k[4]) for k in btc_klines[-min_length:]]
            
            if len(symbol_closes) < 30:
                return True, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', 'assume_ok': True}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            correlation = np.corrcoef(symbol_closes, btc_closes)[0, 1]
            
            if np.isnan(correlation):
                return True, {'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', 'assume_ok': True}
            
            # –ò–¥–µ–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: 0.3-0.7
            # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è - –Ω–µ—Ç —Å–≤—è–∑–∏ —Å —Ä—ã–Ω–∫–æ–º
            # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è - –Ω–µ—Ç –∞–ª—å—Ñ–∞ (–¥–≤–∏–≥–∞–µ—Ç—Å—è –∫–∞–∫ BTC)
            passed = 0.3 <= correlation <= 0.7
            
            return passed, {
                'correlation': correlation,
                'data_points': len(symbol_closes),
                'correlation_strength': self._get_correlation_strength(correlation)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
            return True, {'error': str(e), 'assume_ok': True}
    
    def _get_correlation_strength(self, correlation: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
        abs_corr = abs(correlation)
        if abs_corr < 0.3:
            return "–°–ª–∞–±–∞—è"
        elif abs_corr < 0.7:
            return "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
        else:
            return "–°–∏–ª—å–Ω–∞—è"
    
    # üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ)
    
    async def check_var_risk(self, klines: List, confidence_level: float = 0.95) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ Value at Risk"""
        try:
            if len(klines) < 30:
                return True, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', 'assume_ok': True}
            
            closes = [float(k[4]) for k in klines]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            returns = []
            for i in range(1, len(closes)):
                ret = np.log(closes[i] / closes[i-1])
                returns.append(ret)
            
            if not returns:
                return True, {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏', 'assume_ok': True}
            
            # –†–∞—Å—á–µ—Ç VaR (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥)
            mean_return = np.mean(returns)
            std_return = np.std(returns)
            
            # Z-score –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            from scipy import stats
            z_score = stats.norm.ppf(1 - confidence_level)
            
            # –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π VaR
            var_1d = abs(mean_return + z_score * std_return)
            
            # –ü—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–∏—Å–∫: –Ω–µ –±–æ–ª–µ–µ 5% –∑–∞ –¥–µ–Ω—å
            max_acceptable_var = 0.05
            passed = var_1d <= max_acceptable_var
            
            return passed, {
                'var_1d': var_1d,
                'var_1d_percent': var_1d * 100,
                'confidence_level': confidence_level,
                'mean_return': mean_return,
                'std_return': std_return,
                'max_acceptable_var': max_acceptable_var
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ VaR: {e}")
            return True, {'error': str(e), 'assume_ok': True}
    
    async def check_max_drawdown(self, klines: List) -> Tuple[bool, Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""
        try:
            if len(klines) < 20:
                return True, {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', 'assume_ok': True}
            
            closes = [float(k[4]) for k in klines]
            
            # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
            peak = closes[0]
            max_drawdown = 0
            drawdowns = []
            
            for price in closes:
                if price > peak:
                    peak = price
                drawdown = (peak - price) / peak
                drawdowns.append(drawdown)
                if drawdown > max_drawdown:
                    max_drawdown = drawdown
            
            # –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: –Ω–µ –±–æ–ª–µ–µ 25%
            max_acceptable_drawdown = 0.25
            passed = max_drawdown <= max_acceptable_drawdown
            
            return passed, {
                'max_drawdown': max_drawdown,
                'max_drawdown_percent': max_drawdown * 100,
                'current_drawdown': drawdowns[-1] if drawdowns else 0,
                'max_acceptable_drawdown': max_acceptable_drawdown,
                'data_points': len(closes)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Å–∞–¥–∫–∏: {e}")
            return True, {'error': str(e), 'assume_ok': True}

# üéØ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–µ–∫–ª–∏—Å—Ç–æ–º

def get_advanced_checklist_weights() -> Dict[str, float]:
    """–í–µ—Å–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞"""
    return {
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        'multi_timeframe_alignment': 0.08,
        'rsi_divergence': 0.06,
        'volume_clusters': 0.05,
        'multi_timeframe_rsi': 0.06,
        'stochastic_momentum': 0.05,
        
        # –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        'market_cap_volume': 0.05,
        'relative_volatility': 0.04,
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        'trading_session': 0.04,
        'seasonal_pattern': 0.03,
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
        'psychological_levels': 0.04,
        'large_orders_clusters': 0.04,
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        'correlation_with_btc': 0.05,
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        'var_risk': 0.03,
        'max_drawdown': 0.03
    }

def calculate_advanced_score(check_results: Dict) -> Tuple[float, Dict]:
    """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ score –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞"""
    try:
        weights = get_advanced_checklist_weights()
        total_score = 0
        detailed_scores = {}
        
        for check_name, result in check_results.items():
            weight = weights.get(check_name, 0)
            passed = result.get('passed', False)
            score = weight if passed else 0
            total_score += score
            detailed_scores[check_name] = {
                'weight': weight,
                'passed': passed,
                'score': score,
                'details': result.get('details', {})
            }
        
        return total_score, detailed_scores
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ score: {e}")
        return 0, {}